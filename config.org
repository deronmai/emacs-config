#+TITLE: Emacs config

* Basic Settings
** Defaults
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)  ;; scroll line by line

  ;; autosave
  ;; (setq make-backup-file nil)
  ;; (setq auto-save-default nil)

  (when window-system (global-hl-line-mode t))          ;; easy cursor
  (when window-system (global-prettify-symbols-mode t)) ;; lambda etc looks nice

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (global-display-line-numbers-mode)  ;; Use hooks for specific modes later

  (setq inhibit-startup-message t)

  ;; (setq package-enable-at-startup nil)  ;; disable package.el in favor of elpaca
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
  ;; fontaine
  (use-package fontaine
    :ensure t
    :init
    ;; Copy of https://protesilaos.com/emacs/fontaine default
    (setq fontaine-presets
  	'((small

  	   ;; Aporetic requires install of the below
  	   ;; <https://github.com/protesilaos/aporetic>.

  	   :default-family "Aporetic Serif Mono"
  	   :default-height 100
  	   :variable-pitch-family "Aporetic Sans")
  	  (regular) ; like this it uses all the fallback values and is named `regular'
  	  (medium
  	   :default-weight semilight
  	   :default-height 150
  	   :bold-weight extrabold)
  	  (large
  	   :inherit medium
  	   :default-height 180)
  	  (presentation
  	   :default-height 180)
  	  (t
  	   ;; I keep all properties for didactic purposes, but most can be
  	   ;; omitted.  See the fontaine manual for the technicalities:
  	   ;; <https://protesilaos.com/emacs/fontaine>.
  	   :default-family "Aporetic Sans Mono"
  	   :default-weight regular
  	   :default-height 150

             :fixed-pitch-family nil ; falls back to :default-family
             :fixed-pitch-weight nil ; falls back to :default-weight
             :fixed-pitch-height 1.0

             :fixed-pitch-serif-family nil ; falls back to :default-family
             :fixed-pitch-serif-weight nil ; falls back to :default-weight
             :fixed-pitch-serif-height 1.0

             :variable-pitch-family "Aporetic Serif"
             :variable-pitch-weight nil
             :variable-pitch-height 1.0

             :mode-line-active-family nil ; falls back to :default-family
             :mode-line-active-weight nil ; falls back to :default-weight
             :mode-line-active-height 0.9

             :mode-line-inactive-family nil ; falls back to :default-family
             :mode-line-inactive-weight nil ; falls back to :default-weight
             :mode-line-inactive-height 0.9

             :header-line-family nil ; falls back to :default-family
             :header-line-weight nil ; falls back to :default-weight
             :header-line-height 0.9

             :line-number-family nil ; falls back to :default-family
             :line-number-weight nil ; falls back to :default-weight
             :line-number-height 0.9

             :tab-bar-family nil ; falls back to :default-family
             :tab-bar-weight nil ; falls back to :default-weight
             :tab-bar-height 1.0

             :tab-line-family nil ; falls back to :default-family
             :tab-line-weight nil ; falls back to :default-weight
             :tab-line-height 1.0

             :bold-family nil ; use whatever the underlying face has
             :bold-weight bold

             :italic-family nil
             :italic-slant italic

             :line-spacing nil)))

    :config
    (fontaine-mode 1)
    :hook (emacs-startup . (lambda () (fontaine-set-preset 'regular)))
    ;;(fontaine-set-preset 'regular)
    )

#+END_SRC
* Evil
** Base Install
#+BEGIN_SRC emacs-lisp
  ;; download/install evil mode

  ;; Manual install
  ;; (unless (package-installed-p 'evil)
  ;;   (package-install 'evil))

  ;; enable Evil
  ;; (setq evil-want-C-i-jump nil)  ;; Fix org-mode Tab
  ;; (require 'evil)
  ;; (evil-mode 1)

  ;; use-package
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; optional since defaulted true
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC
** Evil Collection
#+BEGIN_SRC emacs-lisp
  ;; Evil Collection
  ;; Default bindings to evil mode
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC
* Misc Packages 
** which-key
#+BEGIN_SRC emacs-lisp
  ;; Improve key-binding help
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** beacon
#+BEGIN_SRC emacs-lisp
  ;; Improve cursor visibility
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC
* ORG
** Pretty bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()
  			     (org-bullets-mode)
  			     (visual-line-mode)
  			     (org-indent-mode))))
#+END_SRC
** Org Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-directory (file-truename "C:\\Users\\Deron\\notes"))
    )
#+END_SRC
* LaTeX
** auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil))
#+END_SRC
** preview-latex
#+BEGIN_SRC emacs-lisp
  ;; (use-package preview-latex
  ;;   :ensure t)
#+END_SRC
* HELM
** Install
#+begin_src emacs-lisp
  ;; install helm
  (use-package helm
    :ensure t
    :bind
    (("M-x"     . 'helm-M-x)
     ("C-x C-f" . 'helm-find-files)
     ("C-x C-b" . 'helm-buffers-list))
    )

#+end_src
* Magit
** Install
#+begin_src emacs-lisp
  ;; install magit
  (use-package magit
    :ensure t
    :init
    (setq magit-section-disable-line-numbers nil)
    :config
    (org-roam-db-autosync-mode)
    :hook (magit-mode . (lambda () (display-line-numbers-mode -1)))
    )
#+end_src
* Python
** tmp
#+begin_src emacs-lisp
  (setq python-shell-interpreter "C:\\Users\\Deron\\AppData\\Local\\Programs\\Python\\Python313\\python.exe")

#+end_src
