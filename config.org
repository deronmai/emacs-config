#+TITLE: Emacs config

* Basic Settings
** Defaults
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)  ;; scroll line by line

  ;; autosave
  ;; (setq make-backup-file nil)
  ;; (setq auto-save-default nil)

  (when window-system (global-hl-line-mode t))          ;; easy cursor

  ;; pretty symbols (eg. lambda) only for org mode
  (defun my-prettify-symbols-for-org ()
    (when (derived-mode-p 'org-mode)
      (global-prettify-symbols-mode t)))

  (when window-system
    (add-hook 'org-mode-hook 'my-prettify-symbols-for-org))
  ;; (when window-system (global-prettify-symbols-mode t)) ;; pretty symbols for all modes

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (global-display-line-numbers-mode)  ;; Use hooks for specific modes later

  (setq inhibit-startup-message t)
  (setq vc-follow-symlinks t)

  ;; (setq package-enable-at-startup nil)  ;; disable package.el in favor of elpaca
#+END_SRC
** Custom vars
Use custom variable /HOME/ to make moving between systems a bit more seamless.
Between unix/linux systems, the home directories may change, but the relative paths will stay the same.
Likewise, custom variable /EMACS_BUILDS/ will be used for local builds.
#+BEGIN_SRC emacs-lisp
  ;; Set home dir for linux and unix based systems
  (when (not (eq system-type 'windows-nt))
    ;; linux
    (when (eq system-type 'gnu/linux)
      (defconst HOME "/home/dmai" "The home directory for Linux.")
      ;; EMACS_BUILDS=$HOME/repos/emacs for Linux
      (defconst EMACS_BUILDS (concat HOME "/repos/emacs") "The emacs build directory for Linux."))
    ;; Mac
    (when (eq system-type 'darwin)
      (defconst HOME "/Users/deron.mai" "The home directory for Mac.")
      ;; EMACS_BUILDS=$HOME for Mac
      (defconst EMACS_BUILDS HOME "The emacs build directory for Mac.")))
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
  ;; fontaine
  (use-package fontaine
    :ensure t
    :init
    ;; Copy of https://protesilaos.com/emacs/fontaine default
    (setq fontaine-presets
  	'((small

  	   ;; Aporetic requires install of the below
  	   ;; <https://github.com/protesilaos/aporetic>.

  	   :default-family "Aporetic Serif Mono"
  	   :default-height 100
  	   :variable-pitch-family "Aporetic Sans")
  	  (regular) ; like this it uses all the fallback values and is named `regular'
  	  (medium
  	   :default-weight semilight
  	   :default-height 150
  	   :bold-weight extrabold)
  	  (large
  	   :inherit medium
  	   :default-height 180)
  	  (presentation
  	   :default-height 180)
  	  (t
  	   ;; I keep all properties for didactic purposes, but most can be
  	   ;; omitted.  See the fontaine manual for the technicalities:
  	   ;; <https://protesilaos.com/emacs/fontaine>.
  	   :default-family "Aporetic Sans Mono"
  	   :default-weight regular
  	   :default-height 150

             :fixed-pitch-family nil ; falls back to :default-family
             :fixed-pitch-weight nil ; falls back to :default-weight
             :fixed-pitch-height 1.0

             :fixed-pitch-serif-family nil ; falls back to :default-family
             :fixed-pitch-serif-weight nil ; falls back to :default-weight
             :fixed-pitch-serif-height 1.0

             :variable-pitch-family "Aporetic Serif"
             :variable-pitch-weight nil
             :variable-pitch-height 1.0

             :mode-line-active-family nil ; falls back to :default-family
             :mode-line-active-weight nil ; falls back to :default-weight
             :mode-line-active-height 0.9

             :mode-line-inactive-family nil ; falls back to :default-family
             :mode-line-inactive-weight nil ; falls back to :default-weight
             :mode-line-inactive-height 0.9

             :header-line-family nil ; falls back to :default-family
             :header-line-weight nil ; falls back to :default-weight
             :header-line-height 0.9

             :line-number-family nil ; falls back to :default-family
             :line-number-weight nil ; falls back to :default-weight
             :line-number-height 0.9

             :tab-bar-family nil ; falls back to :default-family
             :tab-bar-weight nil ; falls back to :default-weight
             :tab-bar-height 1.0

             :tab-line-family nil ; falls back to :default-family
             :tab-line-weight nil ; falls back to :default-weight
             :tab-line-height 1.0

             :bold-family nil ; use whatever the underlying face has
             :bold-weight bold

             :italic-family nil
             :italic-slant italic

             :line-spacing nil)))

    :config
    (fontaine-mode 1)
    :hook (emacs-startup . (lambda () (fontaine-set-preset 'regular)))
    ;;(fontaine-set-preset 'regular)
    )

#+END_SRC
* Evil
** Base Install
#+BEGIN_SRC emacs-lisp
  ;; download/install evil mode

  ;; Manual install
  ;; (unless (package-installed-p 'evil)
  ;;   (package-install 'evil))

  ;; enable Evil
  ;; (setq evil-want-C-i-jump nil)  ;; Fix org-mode Tab
  ;; (require 'evil)
  ;; (evil-mode 1)

  ;; use-package
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; optional since defaulted true
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC
** Evil Collection
#+BEGIN_SRC emacs-lisp
  ;; Evil Collection
  ;; Default bindings to evil mode
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC
* Terminal
** Vterm (unix only)
Use vterm for Mac and Linux. It is not supported in windows
#+BEGIN_SRC emacs-lisp
  (when (not (eq system-type 'windows-nt))
    ;; Hack in Mac to get around lacking admin privileges to install cmake
    (if (eq system-type 'darwin)
        (setq exec-path (append exec-path '("/Users/deron.mai/bin/CMake.app/Contents/bin")))
      ;; Normal install
      ;; Manual build of vterm
      ;; https://github.com/akermu/emacs-libvterm/tree/master
      (use-package vterm
        :load-path (lambda () (list (concat EMACS_BUILDS "/emacs-libvterm/"))))))
#+END_SRC
* Misc Packages 
** which-key
#+BEGIN_SRC emacs-lisp
  ;; Improve key-binding help
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** beacon
#+BEGIN_SRC emacs-lisp
  ;; Improve cursor visibility
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC
* ORG
** Pretty bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()
  			     (org-bullets-mode)
  			     (visual-line-mode)
  			     (org-indent-mode))))
#+END_SRC
** Org Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    ;; Set different directories for Windows vs Mac
    (setq org-roam-directory
          (if (eq system-type 'windows-nt)  ;; Handle windows
              (file-truename "C:\\Users\\Deron\\notes")
  	  (file-truename (concat HOME "/notes"))))  ;; Handle Mac and linux
    :config
    (org-roam-db-autosync-mode))
#+END_SRC
* LaTeX
** auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil))
#+END_SRC
** preview-latex
#+BEGIN_SRC emacs-lisp
  ;; (use-package preview-latex
  ;;   :ensure t)
#+END_SRC
* HELM
** Install
#+begin_src emacs-lisp
  ;; install helm
  (use-package helm
    :ensure t
    :bind
    (("M-x"     . 'helm-M-x)
     ("C-x C-f" . 'helm-find-files)
     ("C-x C-b" . 'helm-buffers-list))
    )

#+end_src
* Development
This section is generally for usability and dev tooling enhancements. Language specific packages are under the Coding Languages Section
** LSP
*** flycheck
#+BEGIN_SRC emacs-lisp
  ;; (use-package flycheck
  ;;   :ensure t)
#+END_SRC
*** eglot
Don't use eglot for python since seems to have issues with loading environments properly even with pet.
#+BEGIN_SRC emacs-lisp
  ;; Not necessary for emacs 29+ since built-in, but added for backwards compatibility
  ;; (use-package eglot
  ;;   :ensure t
  ;;  )
#+END_SRC
*** lsp-mode
For python
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t)
#+END_SRC
**** lsp-pyright
LSP for python. Note that pyright must be installed for the system as well.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-pyright
    :after lsp-mode
    :ensure t
    :custom (lsp-pyright-langserver-command "pyright") ;; or basedpyright
    ;; :hook (python-base-mode . (lambda ()
    ;;                       		      (require 'lsp-pyright)
    ;;                       		      ;; handle lsp in pet
    ;;                       		      ;; (lsp)  ; or lsp-deferred
    ;;                       		      )))
    )
#+END_SRC
*** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :hook (python-base-mode . company-mode))
#+END_SRC
** Tree-sitter
*** installation
#+BEGIN_SRC emacs-lisp
  ;; already included in emacs 29+
  ;; (use-package tree-sitter
  ;;  :ensure t
  ;;  :config
  ;;  (add-to-list 'tree-sitter-load-path "/Users/deron.mai/tree-sitter-rust/build/lib")
  ;;  )
  ;; (use-package tree-sitter-langs
  ;;  :ensure t)
#+END_SRC
** Environment
*** direnv
Support for direnv
#+BEGIN_SRC emacs-lisp
  ;; direnv
  ;; Not recommended for Pet
  ;; (use-package direnv
  ;;   :ensure t)

  ;; envrc
  (use-package envrc
    :ensure t
    :hook (change-major-mode-after-body . envrc-mode))
#+END_SRC
** Magit
*** Install
#+begin_src emacs-lisp
  ;; install magit
  (use-package magit
    :ensure t
    :init
    (setq magit-section-disable-line-numbers nil)
    :hook (magit-mode . (lambda () (display-line-numbers-mode -1)))
    )
#+end_src
* Coding Lanuages
** Python
Python must also be installed on the system
*** Python tree-sitter mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'major-mode-remap-alist
  	     '(python-mode . python-ts-mode))
#+END_SRC
*** Variables
#+BEGIN_SRC emacs-lisp
  ;; Set interpreter on windows (likely should update to use pyenv on windows in future)
  (when (eq system-type 'windows-nt)
    (setq python-shell-interpreter "C:\\Users\\Deron\\AppData\\Local\\Programs\\Python\\Python313\\python.exe"))
#+END_SRC
*** Tree-sitter Grammar
#+BEGIN_SRC emacs-lisp
  ;; Install with treesit-install-language-grammar command (should make function for this in future)
  ;; source: https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/index.html
  (add-to-list
   'treesit-language-source-alist
   '(python "https://github.com/tree-sitter/tree-sitter-python.git" "v0.23.3"))
#+END_SRC
*** Virtual Environment Manager
https://github.com/wyuenho/emacs-pet
#+BEGIN_SRC emacs-lisp
  (use-package pet
    :after lsp-pyright
    :ensure t
    :config
    (add-hook 'python-base-mode-hook
              (lambda ()
  	      (pet-mode -10)

  	      ;; Set local shells
  	      (setq-local python-shell-interpreter (pet-executable-find "python")
  			  python-shell-virtualenv-root (pet-virtualenv-root))

  	      ;; lsp setup
  	      (setq-local lsp-pyright-python-executable-cmd python-shell-interpreter
                            lsp-pyright-venv-path python-shell-virtualenv-root)
  	      ;; start lsp
  	      (lsp)

  	      )))
#+END_SRC
** Rust
Require https://github.com/rust-lang/rust-analyzer installed
*** Rust tree-sitter mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'major-mode-remap-alist
  	     '(rust-mode . rust-ts-mode))
#+END_SRC
*** Rustic
#+BEGIN_SRC emacs-lisp
  (use-package rustic
    :ensure t
    :config
    (setq rustic-format-on-save nil)
    )
#+END_SRC
*** Tree-sitter rust recipe
#+BEGIN_SRC emacs-lisp
  ;; Install with treesit-install-language-grammar command (should make function for this in future)
  ;; source: https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/index.html
  (add-to-list
   'treesit-language-source-alist
   '(rust "https://github.com/tree-sitter/tree-sitter-rust.git" "v0.23.3"))
#+END_SRC
* AI
** gptel
#+BEGIN_SRC emacs-lisp
  (use-package gptel
    :ensure t
    :config
    ;; key in ~/.authinfo
    (setq gptel-api-key-from-auth-source t))
#+END_SRC
